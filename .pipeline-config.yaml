version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    if [[ "$(get_env pipeline_namespace "")" == "cd" || "$(get_env pipeline_namespace "")" == "cc" ]]; then
      echo "No setup when running CD or CC pipeline..."
      exit 0
    fi

    source scripts/ci-cd/code_setup.sh

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    # trigger unit tests
    source scripts/ci-cd/unit-tests-setup.sh
    source scripts/ci-cd/unit-tests.sh

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/ci-cd/build_setup.sh
    source scripts/ci-cd/build.sh

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    # use different setup depending on CI or CD
    if [ "$(get_env pipeline_namespace "")" = "ci" ]; then
      source scripts/ci-cd/deploy_setup_ci.sh
    else
      source scripts/ci-cd/deploy_setup_cd.sh
    fi

    source scripts/ci-cd/deploy.sh

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/ci-cd/acceptance-tests-setup.sh
    source scripts/ci-cd/acceptance-tests.sh

release:
  abort_on_failure: false
  image: icr.io/continuous-delivery/toolchains/devsecops/compliance-baseimage:2.26.1@sha256:a780174a64474187b01b5e40a1721d8307f02897ac6f3eba2d482d4f4926edf1
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    export CHART_PATH=$(get_env CHART_PATH)
    source scripts/ci-cd/release.sh

dynamic-scan:
  dind: true
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    if [ -z "$(get_env opt-in-dynamic-scan "")" ]; then
      echo "If you want to enable this stage, add 'opt-in-dynamic-scan' parameter to your pipeline with any value. Also, please add 'opt-in-dynamic-api-scan' to your pipeline with any value to have api scans running, and 'opt-in-dynamic-ui-scan' with any value to have ui scans running" >&2
    else
      if [[ "$(get_env pipeline_namespace)" == *"cc"* ]]; then
        app_url=$(get_env app-url "")
        if [[ -z "${app_url}" ]]; then
          echo "Please provide the app-url as the running application url. Recommended to use stage/test environment to run the Dynamic scan." >&2
          exit 1
        fi
      fi
      source scripts/ci-cd/zap/trigger-async-zap
    fi

owasp-zap:
  dind: true
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    export APP_URL=$(get_env app-url)
    echo "APP_URL is ${APP_URL}"
    set_env "target-application-server-url" "$APP_URL"

    source scripts/ci-cd/zap/trigger_zap_scans
